pipeline {
    agent {
        kubernetes {
            cloud 'kubernetes'
            yaml '''
              spec:
                containers:
                - name: artillery
                  image: renciorg/artillery:2.0.0-5-expect-plugin
                  command: ["sleep", "3600"]
                  securityContext:
                    runAsUser: 1000
            '''
        }
    }
    stages {
        stage('test') {
            steps {
                script {
                    env.EMAIL_RECIPIENTS = params.email_recipients
                }
                container('artillery') {
                    dir('monitoring') {
                        sh '''
                        ./run_tests.sh
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts 'monitoring/reports/*'
            publishHTML (target : [allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'monitoring',
                        reportFiles: 'report.html',
                        reportName: 'Report',
                        reportTitles: 'Artillery Report'])
        }
        failure {
            emailext (
            subject: "Translator service warn (${env.SERVER_URL})",
            to: env.EMAIL_RECIPIENTS,
            body: "Some monitoring checks failed. Please view report here (<a href='https://stars.renci.org/var/translator-monitoring/reports/${env.JOB_BASE_NAME}-${env.BUILD_NUMBER}.html'>Report</a>).",
            mimeType: 'text/html'
            )
            script {

                // withCredentials([sshUserPrivateKey(credentialsId: 'stars-user', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
                //     def remote = [:]
                //     remote.name = "stars"
                //     remote.user = userName
                //     remote.identityFile = identity
                //     remote.allowAnyHosts = true
                //     remote.host = "stars.renci.org"
                //     def remote_file_name = env.JOB_BASE_NAME + "-" + env.BUILD_NUMBER + ".html"
                //     sshPut remote: remote, from: 'monitoring/report.html', into: "/projects/stars/var/translator-monitoring/reports/" + remote_file_name
                // }
            }

        }
    }
}
