replicaCount: 1
image:
  repository: "ghcr.io/translatorsri/cqs"
  tag: "fillthisin"
  pullPolicy: Always
ingress:
  host: "fillthisin"
  class: ""
  enabled: true
  pathType: ImplementationSpecific
  timeout: 7200 # 1hr
  tls:
    enabled: true
  annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "250m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "86400"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "86400"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      keepalive_timeout 86400;
    nginx.ingress.kubernetes.io/connection-proxy-header: keep-alive
    nginx.ingress.kubernetes.io/send-timeout: "86400"
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/upstream-keepalive-timeout: "86400"
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0,::/0
x_trapi:
  maturity: "development"
  location: "RENCI"
  version: "1.5.0"
app:
  port: 8000
  resources:
    requests:
      memory: 16Gi
      cpu: 4
      ephemeral-storage: 4Gi
    limits:
      memory: 24Gi
      cpu: 4
      ephemeral-storage: 4Gi
  log_level: "info,rocket=debug,launch=debug"
  workflow_runner_url: "fillthisin"
  response_url: "fillthisin"
  write_wfr_output: "false"
  affinity: {}
  tolerations: []
  nodeSelector: {}

postgres:
  image:
    repository: "postgres"
    tag: "16.4-bookworm"
    pullPolicy: IfNotPresent
  mountSubPath: ""
  resources:
    requests:
      memory: 5Gi
      cpu: 1000m
    limits:
      memory: 10Gi
      cpu: 1000m
  imagePullSecrets: []
  storage:
    size: 12Gi
  user: "fillthisin"
  password: "fillthisin"
  dbName: "fillthisin"
  server: "fillthisin"
  port: 5432
  affinity: {} 
  tolerations: []
  nodeSelector: {}
