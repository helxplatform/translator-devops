pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'translator && aws && build' }
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
        string(name: 'KUBERNETES_CLUSTER_NAME', defaultValue: 'translator-eks-ci-blue-cluster', description: 'AWS EKS that will host this application')
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    stages {
        stage('Clean') {
            steps {
                cleanWs()
            }
        }
        stage('Build Version') {
            when {
                expression {
                    return !params.BUILD_VERSION
                }
            }
            steps{
               script {
                    BUILD_VERSION_GENERATED = VersionNumber(
                        versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
                        projectStartDate:    '1970-01-01',
                        skipFailedBuilds:    true)
                    currentBuild.displayName = BUILD_VERSION_GENERATED
                    env.BUILD_VERSION = BUILD_VERSION_GENERATED
              }
           }
        }
        stage('build') {
            when {
                anyOf {
                    allOf {
                        changeset "helm/biolink-lookup/*"
                        expression {
                            return !params.BUILD_VERSION
                        }
                    }
                    triggeredBy 'UserIdCause'
                }
            }
            steps {
                checkout scm
                withEnv([
                    "IMAGE_NAME=translator-bl-lookup",
                    "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                ]) {
                    dir("helm/biolink-lookup") {
                        script {
 
                            sh '''
                            docker pull renciorg/bl_lookup:latest
                            docker tag renciorg/bl_lookup:latest 853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION
                            '''
                            def image = docker.image('853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION')
                            docker.withRegistry('https://853771734544.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:ifx-jenkins-ci') {
                                image.push()
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                anyOf {
                    changeset "helm/biolink-lookup/*"
                    expression {
                        return !params.BUILD_VERSION
                    }
                }
            }
            steps {
                checkout scm
                sshagent (credentials: ['917d2cc8-84fe-4faf-89e5-25ea6649be83']) {
                    dir("helm/biolink-lookup") {
                        //sh 'git clone git@github.com:Sphinx-Automation/translator-ops.git'
                        sh 'git clone git@github.com:mapleknight/translator-ops.git'
                        configFileProvider([
                            configFile(fileId: 'values-ci.yaml', targetLocation: 'values-ci.yaml')
                        ]){
                            withAWS(credentials:'aws-ifx-deploy') {
                                sh '''
                                aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_CLUSTER_NAME}
                                cp -R translator-ops/sri/biolink-lookup/deploy/* ./
                                mv values-ci.yaml values.yaml 
                                /bin/bash deploy.sh
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
}
