pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'translator && aws && build' }
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
        choice(name: 'PLATERS', choices: 'all\nbiolink\nchemical-normalization\ncord19\ncovid-phenotypes\ncovidkopkg\nctd\ndrugcentral\nfoodb\ngtex\ngtopdb\ngwas-catalog\nhetio\nhgnc\nhmdb\nhuman-goa\nintact\nmolepro-fda\nmychem\nontological-hierarchy\npanther\npharos\nrobokopkg\ntextminingkp\ntopmed\nuberongraph\nviral-proteome', description: 'Platers to deploy')
        choice(name: 'LOAD_DATA', choices: 'no\nyes', description: 'Load data or not, default no')
        choice(name: 'ACTION', choices: 'install\ndelete', description: 'Install or delete, default install')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
        string(name: 'KUBERNETES_CLUSTER_NAME', defaultValue: 'translator-eks-ci-blue-cluster', description: 'AWS EKS that will host this application')
    }
    triggers {
        pollSCM('H/2 * * * *')
    }
    environment {
        DEPLOY_ENV = "ci"
    }
    stages {
        stage('Clean') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Build Version') {
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                    }
                    anyOf {
                        changeset "helm/plater/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps{
               script {
                    def imageMeta = readYaml file: 'helm/plater/ncats-images-meta.yaml'
                    env.ORIGINAL_REPO = imageMeta.plater.image
                    env.BUILD_VERSION = imageMeta.plater.version
                    env.ORIGINAL_REPO_NEO4J = imageMeta.neo4j.image
                    env.BUILD_VERSION_NEO4J = imageMeta.neo4j.version
                    currentBuild.displayName = imageMeta.plater.version + "#" + imageMeta.neo4j.version
              }
           }
        }
        stage('build image') {
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                    }
                    anyOf {
                        changeset "helm/plater/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps {
                withEnv([
                    "IMAGE_NAME=translator-sri-plater-clustered",
                    "BUILD_VERSION=" + (params.BUILD_VERSION ? params.BUILD_VERSION.tokenize("#")[0] : env.BUILD_VERSION)
                ]) {
                    dir("helm/plater") {
                        script {

                            sh '''
                            docker pull $ORIGINAL_REPO:$BUILD_VERSION
                            docker tag $ORIGINAL_REPO:$BUILD_VERSION 853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION
                            '''
                            def image = docker.image('853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION')
                            docker.withRegistry('https://853771734544.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:ifx-jenkins-ci') {
                                image.push()
                            }
                        }
                    }
                }
                withEnv([
                    "IMAGE_NAME=translator-sri-neo4j-42-apoc-gds",
                    "BUILD_VERSION=" + (params.BUILD_VERSION ? params.BUILD_VERSION.tokenize("#")[1] : env.BUILD_VERSION_NEO4J)
                ]) {
                    dir("helm/plater") {
                        script {

                            sh '''
                            docker pull $ORIGINAL_REPO_NEO4J:$BUILD_VERSION_NEO4J
                            docker tag $ORIGINAL_REPO_NEO4J:$BUILD_VERSION_NEO4J 853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION
                            '''
                            def image = docker.image('853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION')
                            docker.withRegistry('https://853771734544.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:ifx-jenkins-ci') {
                                image.push()
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                anyOf {
                    changeset "helm/plater/*"
                    triggeredBy 'UserIdCause'
                }
            }
            steps {
                sshagent (credentials: ['labshare-svc']) {
                    withCredentials([
                        file(
                            credentialsId: 'sri-git-crypt.key.asc',
                            variable: 'cryptasc'),
                        file(
                            credentialsId: 'sri-git-crypt.key.pwd',
                            variable: 'cryptpwd'),
                    ]){
                        withEnv([
                            "BUILD_VERSION_PLATER=" + (params.BUILD_VERSION ? params.BUILD_VERSION.tokenize("#")[0] : env.BUILD_VERSION),
                            "BUILD_VERSION_NEO4J=" + (params.BUILD_VERSION ? params.BUILD_VERSION.tokenize("#")[1] : env.BUILD_VERSION_NEO4J)
                        ]) {
                            withAWS(credentials:'aws-ifx-deploy') {
                                sh '''
                                # copy secret files to current directory
                                cp $cryptasc sri-git-crypt.key.asc
                                cp $cryptpwd sri-git-crypt.key.pwd
                                # git crypt unlock the repo
                                gpg --pinentry-mode=loopback --passphrase-file sri-git-crypt.key.pwd --decrypt sri-git-crypt.key.asc | git-crypt unlock -
                                cd helm/plater
                                git clone git@github.com:Sphinx-Automation/translator-ops.git
                                aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_CLUSTER_NAME}
                                cp -R translator-ops/ops/sri/plater/deploy/* ./
                                /bin/bash deploy.sh
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
}
